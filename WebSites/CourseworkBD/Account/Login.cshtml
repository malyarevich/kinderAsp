@* Remove this section if you are using bundling *@
@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
}

@{
    Layout = "~/_AuthLayout.cshtml";
    Page.Title = "Log in";

    // Initialize general page variables
    var email = "";
    var password = "";
    var rememberMe = false;

    var returnUrl = Request.QueryString["ReturnUrl"];
    if (returnUrl.IsEmpty())
    {
        // Some external login providers always require a return URL value
        returnUrl = Href("~/");
    }

    // Setup validation
    Validation.RequireField("email", "You must specify an email address.");
    Validation.RequireField("password", "You must specify a password.");
    Validation.Add("password",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "Password must be at least 6 characters"));

    // If this is a POST request, validate and process data
    if (IsPost)
    {
        AntiForgery.Validate();
        // is this an external login request?
        string provider = Request.Form["provider"];
        if (!provider.IsEmpty())
        {
            OAuthWebSecurity.RequestAuthentication(provider, Href("~/Account/RegisterService", new { returnUrl }));
            return;
        }
        else if (Validation.IsValid())
        {
            email = Request.Form["email"];
            password = Request.Form["password"];
            rememberMe = Request.Form["rememberMe"].AsBool();

            if (WebSecurity.UserExists(email) && WebSecurity.GetPasswordFailuresSinceLastSuccess(email) > 4 && WebSecurity.GetLastPasswordFailureDate(email).AddSeconds(60) > DateTime.UtcNow)
            {
                Response.Redirect("~/Account/AccountLockedOut");
                return;
            }

            // Attempt to log in using provided credentials
            if (WebSecurity.Login(email, password, rememberMe))
            {
                Context.RedirectLocal(returnUrl);
                return;
            }
            else
            {
                ModelState.AddFormError("The user name or password provided is incorrect.");
            }
        }
    }
}

<hgroup class="title">
    <h1>@Page.Title.</h1>
</hgroup>

<section id="loginForm">
    <div class="text col-sm-8 col-md-8 col-lg-8 description">
        <div class="well well-lg">
            <p>
                This site provides Internet access to the kindergarten for parents.
                This kindergarten is called the "The Bell".
                More than 150 children are brought up in our kindergarten.
                The kindergarten has a long history.
            </p>
            <div class="image">
                <figure>
                    <img class="img-rounded img-responsive" src="~/Images/the-bell.jpg" />
                </figure>
            </div>
        </div>
    </div>
    <div class="text col-sm-4 col-md-4 col-lg-4">
        <div class="well well-lg">
            <div class="panel-body">
                <h2>Use a local account to log in.</h2>
                <form role="form" method="post">
                    @AntiForgery.GetHtml()  
                    @Html.ValidationSummary("Log in was unsuccessful. Please correct the errors and try again.", excludeFieldErrors: true, htmlAttributes: null)

                    <fieldset>
                        <legend>Log in to Your Account</legend>
                        <div class="form-group email">
                            <label for="email" @if (!ModelState.IsValidField("email")) { <text> class="error-label" </text>    }>Email address</label>
                            <input class="form-control" placeholder="E-mail" type="email" id="email" name="email" value="@email" @Validation.For("email") autofocus>                            
                            @* Write any user name validation errors to the page *@
                            @Html.ValidationMessage("email")
                        </div>
                        <div class="form-group password">
                            <label for="password" @if (!ModelState.IsValidField("password")) { <text> class="error-label" </text>    }>Password</label>
                            <input type="password" class="form-control" placeholder="Password"  id="password" name="password" @Validation.For("password") value="">
                        </div>
                        <div class="checkbox remember-me">
                            <label class="checkbox" for="rememberMe">
                                <input type="checkbox" id="rememberMe" name="rememberMe" value="true" checked="@rememberMe">Remember Me
                            </label>
                        </div>
                        <div class="form-group">
                            <a href="~/Account/Register">Don't have a Account?</a>
                            <a href="~/Account/ForgotPassword">Did you forget your password?</a>
                        </div>
                        <!-- Change this to a button or input when using this as a form -->
                        <input class="btn btn-lg btn-success btn-block" type="submit" value="Log in" />
                    </fieldset>
                </form>
            </div>
        </div>
    </div>

</section>